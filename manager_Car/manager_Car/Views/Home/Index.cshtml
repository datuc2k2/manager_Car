<!DOCTYPE html>
<html lang="vi">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Bảng Tổng Kết Điểm</title>

	<!-- CSS -->
	<link rel="stylesheet" href="https://cdn.datatables.net/2.1.4/css/dataTables.dataTables.min.css">
	<link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.5.0/css/responsive.dataTables.min.css">
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
	<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css" rel="stylesheet" />
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

	<!-- jQuery: LUÔN PHẢI LOAD ĐẦU TIÊN -->
	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>


	<!-- DataTables -->
@* 	<script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>*@
	 @* <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>  *@
	<script src="https://cdn.datatables.net/2.1.4/js/dataTables.min.js"></script>
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

	<style>
		body {
			background-color: #FFF9E6;
			overflow-x: hidden;
		}

		table.dataTable {
			width: 100% !important;
			border-collapse: collapse;
			border: 1px solid #dee2e6;
		}

			table.dataTable th {
				background-color: #006fff2e;
			}

			table.dataTable th, table.dataTable td {
				border: 1px solid #dee2e6;
				padding: 6px;
				text-align: center !important;
				font-size: 0.9rem;
			}

		.header_image {
			display: flex;
			align-items: center;
			gap: 10px; /* Space between image and text */
			padding: 10px;
		}

		.logo {
			width: 80px;
			height: auto;
			max-width: 100%;
		}

		.header_image div {
			flex: 1; /* Take up remaining space */
			text-align: center; /* Center the h2 text */
		}

		.table-container {
			width: 100%;
			overflow-x: auto;
		}
		@@media (max-width: 768px) {

			.logo {
				width: 60px;
			}

			.contact-info {
				padding: 10px;
			}

			table.dataTable th, table.dataTable td {
				font-size: 0.8rem;
				padding: 4px;
			}

			button.btn.btn-warning {
				padding: 4px 8px !important;
			}
			.modal-dialog {
				max-width: 95vw;
			}

			.modal-body .row {
				flex-direction: column;
				gap: 10px;
			}

			.modal-body .col-md-5, .modal-body .col-md-2 {
				width: 100%;
			}

			.modal-body .col-md-2 {
				display: flex;
				justify-content: center;
				gap: 10px;
			}
		}

		/* Default styles for desktop (or larger screens) */
		#hl1 {
			display: inline; /* Ensure it stays on the same line as "Bảng tổng kết điểm" */
		}

		#hl2 {
			display: none; /* Hidden by default on desktop */
		}

		@@media (max-width: 576px) {
			body {
				font-size: 14px;
			}

			.header h2 {
				font-size: clamp(1.2rem, 3.5vw, 1.5rem);
			}

			.contact-info {
				font-size: clamp(0.8rem, 2vw, 0.9rem);
			}

			.table-container {
				padding: 5px;
			}
			/* Styles for mobile (screens up to 576px wide) */
			#hl1 {
				display: none; /* Hide the single-line version on mobile */
			}

			#hl2 {
				margin-top: 8px;
				display: block; /* Show the block-level (new line) version on mobile */
			}
		}
	</style>
</head>

<body>
	<div class="header">
		<div class="header_image">
			<img src="~/image/Logo zoom chuẩn.png" alt="Logo" class="logo">
			<div>
				<h2 style="text-align:center">Bảng tổng kết điểm <span id="hl1" style="color:#0dcaf0!important"> FLASHCAR GROUP</span><br /><span id="hl2" style="color:#0dcaf0!important;"> FLASHCAR GROUP</span></h2>
				
			</div>
		</div>
    <ul class="contact-info list-unstyled">
        <li>
            <i>- Bấm
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path>
                    <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path>
                </svg> xem chi tiết lịch sử giao dịch
            </i>
        </li>
        <li><i>- Mua điểm ib kế toán FlashCar.</i></li>
			<li><i>- SĐT nhóm trưởng: <a style="text-decoration: none;" >0372223883</a></i></li>
			<li><i>- SĐT kế toán trưởng: <a style="text-decoration: none;">0867379860</a></i></li>
			<li><i><a style="text-decoration: none;" href="https://docs.google.com/document/d/10QjFQNB4RP2aFikIV3-WUe5M2p_7zAcIp1CM_30jyYU/edit?tab=t.0">- Nội quy FlashCar</a></i></li>
    </ul>
</div>
	<div class="table-container">
		<table id="darkNightTable" class="display">
			<thead>
				<tr>
					<th>STT</th>
					<th>Tên Zalo</th>
					<th>Đ</th>
					<th>TĐ</th>
					<th>TT</th>
				</tr>
			</thead>
			<tbody></tbody> <!-- Dữ liệu sẽ được thêm động -->
		</table>
	</div>

	<!-- Modal -->
	<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-lg">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="exampleModalLabel">Lịch sử giao dịch của <span id="nameUser" style="color:#0dcaf0"></span></h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<div class="row mb-3">
						<div class="col-md-5">
							<label for="historyFromDate" class="form-label">Từ ngày:</label>
							<input type="date" class="form-control" id="historyFromDate">
						</div>
						<div class="col-md-5">
							<label for="historyToDate" class="form-label">Đến ngày:</label>
							<input type="date" class="form-control" id="historyToDate">
						</div>
						<div class="col-md-2 d-flex align-items-end justify-content-between">
							<button type="button" class="btn btn-info me-1" id="applyHistoryFilterBtn" title="Áp dụng bộ lọc">
								<i class="bi bi-funnel-fill"></i>
							</button>
							<button type="button" class="btn btn-secondary" id="resetHistoryFilterBtn" title="Đặt lại bộ lọc">
								<i class="bi bi-arrow-counterclockwise"></i>
							</button>
						</div>
					</div>

					<hr>
					@* <p> <span class="text-warning "> >></span> Chốt điểm đến 23h59 ngày 01/07/2025 : <span class="text-warning fw-bold">1.5 đ</span></p> *@
					<div id="historyContent" style="max-height: 400px; overflow-y: auto;">
						<p>Đang tải lịch sử...</p>
					</div>
				</div>

				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
				</div>
			</div>
		</div>
	</div>
	<script src="https://cdn.datatables.net/responsive/2.5.0/js/dataTables.responsive.min.js"></script>
	<script>
		let table;
		let allTransactions = [];  // Will hold full transaction list for current user
		let currentUser = null;
		let u_id = 0, u_name = '';

		$(document).ready(function () {
			fetchUsers();
		});

		// Reset date filters
		$('#resetHistoryFilterBtn').on('click', function () {
			$('#historyFromDate').val('');
			$('#historyToDate').val('');
			renderHistory(allTransactions, currentUser); // Render full list again
		});

		function fetchUsers() {
			$.ajax({
				url: "/api/UserQuery/getUsers",
				method: "GET",
				success: function (data) {
					const tableData = data.map((user, index) => ({
						id: user.id,
						name: user.name,
						points: user.point,
						reward: user.point * 150000
					}));

					if ($.fn.DataTable.isDataTable('#darkNightTable')) {
						table.clear().rows.add(tableData).draw();
					} else {
						table = $('#darkNightTable').DataTable({
							language: {
								"decimal": "",
								"emptyTable": "Không có dữ liệu",
								"info": "Hiển thị _START_ đến _END_ của _TOTAL_ bản ghi",
								"infoEmpty": "Hiển thị 0 đến 0 của 0 bản ghi",
								"infoFiltered": "(lọc từ _MAX_ bản ghi)",
								"thousands": ",",
								"lengthMenu": "Hiển thị _MENU_ bản ghi",
								"loadingRecords": "Đang tải...",
								"processing": "Đang xử lý...",
								"search": "Tìm kiếm:",
								"zeroRecords": "Không tìm thấy bản ghi nào",
								"paginate": {
									"first": "<<",
									"last": ">>",
									"next": ">",
									"previous": "<"
								}},
							data: tableData,
							columns: [
								{ data: null, render: (data, type, row, meta) => meta.row + 1 },
								{ data: "name" },
								{ data: "points" },
								{
									data: "reward",
									render: (data) => `${data.toLocaleString('vi-VN')} đ`
								},
								{
									data: null,
									render: (data) => {
										const nameEscaped = data.name.replace(/'/g, "\\'");
										return `<button onclick="showHistory(${data.id}, '${nameEscaped}')" class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#exampleModal">
																	<span style="color:white">
																		<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle" viewBox="0 0 16 16">
																			<path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path>
																			<path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path>
																		</svg>
																	</span>
																</button>`;
									}
								}
							],
							paging: true,
							searching: true,
							info: false,
							createdRow: function (row, data, index) {
								if (index < 5) {
									$(row).css('font-weight', 'bold').addClass('fixed-row fixed-row-' + index);
								}
							}
						});
					}
				},
				error: function (xhr, status, error) {
					alert("Lỗi khi tải danh sách người dùng: " + error);
				}
			});
		}

		function showHistory(userId, userName) {
			u_id = userId;
			u_name = userName;
			$("#nameUser").text(userName);
			$("#historyContent").html("<p>Đang tải lịch sử...</p>");

			const today = new Date();
			const firstDay = new Date(today.getFullYear(), today.getMonth(), 1).toISOString().slice(0, 10);
			const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0).toISOString().slice(0, 10);

			$('#historyFromDate').val(firstDay);
			$('#historyToDate').val(lastDay);

			// Load all transaction data once
			$.ajax({
				url: `/api/UserQuery/getUserTransactionsById?userId=${userId}`,
				method: "GET",
				success: function (response) {
					allTransactions = response.transactions;
					currentUser = response.user;
					renderHistory(allTransactions, currentUser); // First render
				},
				error: function () {
					$("#historyContent").html("<p class='text-danger'>Lỗi khi tải dữ liệu lịch sử.</p>");
				}
			});
		}

				function renderHistory(transactions, user) {
			const fromDateVal = $('#historyFromDate').val();
			const toDateVal = $('#historyToDate').val();

			let filtered = transactions;

			if (fromDateVal) {
				filtered = filtered.filter(t => new Date(t.dateTime) >= new Date(fromDateVal + 'T00:00:00'));
			}
			if (toDateVal) {
				filtered = filtered.filter(t => new Date(t.dateTime) <= new Date(toDateVal + 'T23:59:59'));
			}

			if (filtered.length === 0) {
				$("#historyContent").html("<p>Không có lịch sử giao dịch trong khoảng thời gian đã chọn.</p>");
				return;
			}

			// Group by date
			const grouped = {};
			filtered.forEach(tran => {
				const dateKey = new Date(tran.dateTime).toISOString().split('T')[0];
				if (!grouped[dateKey]) grouped[dateKey] = [];
				grouped[dateKey].push(tran);
			});

			const sortedDates = Object.keys(grouped).sort((a, b) => new Date(b) - new Date(a)); // Ascending

			// Recalculate currentTotal based on filtered data
			//Code của Đại
			// let recalculatedTotal = user.point || 0;
			// for (const tran of filtered) {
			// 	const isSender = tran.proposeUsername === user.name;
			// 	const amount = isSender ? tran.point : -tran.point;
			// 	recalculatedTotal += amount;
			// }
			// let currentTotal = recalculatedTotal;

			// // Now render each day from latest to oldest
			// sortedDates.reverse(); // Descending for display

			// let html = '';
			// for (const dateKey of sortedDates) {
			// 	const dailyTransactions = grouped[dateKey];
			// 	let dailyChange = 0;
			// 	let dayHtml = '';

			// 	dailyTransactions.forEach(tran => {
			// 		const isSender = tran.proposeUsername === user.name;
			// 		const amount = isSender ? tran.point : -tran.point;
			// 		dailyChange += amount;

			// 		const pointText = amount > 0
			// 			? `<span class="text-primary fw-bold">+${amount}</span>`
			// 			: `<span class="text-danger fw-bold">${amount}</span>`;

			// 		const counterParty = isSender ? tran.receiveUsername : tran.proposeUsername;
			// 		const dateTime = new Date(tran.dateTime).toLocaleString('vi-VN', {
			// 			day: '2-digit', month: '2-digit', year: 'numeric',
			// 			hour: '2-digit', minute: '2-digit', hour12: false
			// 		});

			// 		const calendarText = ((tran.calendar1 || '') + (tran.calendar2 || '')).trim() || '[Không có]';

			// 		dayHtml += `
			// 			<div class="border rounded p-2 mb-3">
			// 				<p class="mb-1"><strong>${dateTime}</strong> &nbsp; ${pointText}</p>
			// 				<p class="mb-1"><strong>${isSender ? 'Chuyển cho' : 'Nhận từ'}:</strong> ${counterParty}</p>
			// 				<p class="mb-1"><strong class="text-success">Lịch: </strong> ${calendarText}</p>
			// 			</div>`;
			// 	});

			//Code của Đạt
			let currentTotal = user.point || 0;
			let html = '';

			// Process each day from latest to oldest
			for (const dateKey of sortedDates) {
				const dailyTransactions = grouped[dateKey];
				let dailyChange = 0;
				let dayHtml = '';

				dailyTransactions.forEach(tran => {
					const isSender = tran.proposeUsername === user.name;
					const amount = isSender ? tran.point : -tran.point; 
					dailyChange += amount;

					const pointText = amount > 0
						? `<span class="text-primary fw-bold">+${amount}</span>`
						: `<span class="text-danger fw-bold">${amount}</span>`;

					const counterParty = isSender ? tran.receiveUsername : tran.proposeUsername;
					const dateTime = new Date(tran.dateTime).toLocaleString('vi-VN', {
						day: '2-digit', month: '2-digit', year: 'numeric',
						hour: '2-digit', minute: '2-digit', hour12: false
					});

					const calendarText = ((tran.calendar1 || '') + (tran.calendar2 || '')).trim() || '[Không có]';

					dayHtml += `
						<div class="border rounded p-2 mb-3">
							<p class="mb-1"><strong>${dateTime}</strong>   ${pointText}</p>
							<p class="mb-1"><strong>${isSender ? 'Chuyển cho' : 'Nhận từ'}:</strong> ${counterParty}</p>
							<p class="mb-1"><strong class="text-success">Lịch: </strong> ${calendarText}</p>
						</div>`;
				});

				// Display date+1
				const date = new Date(dateKey);
				// date.setDate(date.getDate() + 1);
				const dateDisplay = date.toLocaleDateString('vi-VN');

				const summary = `
					<p><span class="text-warning">>></span>
					Chốt điểm đến 23h59 ngày ${dateDisplay}:
					<span class="text-warning fw-bold">${currentTotal.toFixed(2)} đ</span></p>`;

				html += summary + dayHtml;
				currentTotal -= dailyChange;
			}

			$("#historyContent").html(html);
		}

		// Áp dụng bộ lọc trong modal
		$(document).on('click', '#applyHistoryFilterBtn', function () {
			if (u_id && u_name && currentUser && allTransactions.length > 0) {
				renderHistory(allTransactions, currentUser);
			} else {
				showToast("Lỗi", "Không tìm thấy dữ liệu người dùng để lọc.", "danger");
			}
		});

		// Toast function using SweetAlert2
		function showToast(title, message, type) {
			Swal.mixin({
				toast: true,
				position: 'top-end',
				showConfirmButton: false,
				timer: 3000,
				timerProgressBar: true,
				didOpen: toast => {
					toast.addEventListener('mouseenter', Swal.stopTimer);
					toast.addEventListener('mouseleave', Swal.resumeTimer);
				}
			}).fire({
				icon: type === 'danger' ? 'error' : type,
				title: title,
				text: message
			});
		}
	</script>

	
</body>
</html>