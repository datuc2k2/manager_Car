<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Danh sách người dùng</title>
    <link rel="stylesheet" href="https://cdn.datatables.net/2.1.4/css/dataTables.dataTables.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdn.datatables.net/2.1.4/js/dataTables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>

    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }

        table.dataTable {
            width: 100% !important;
            border-collapse: collapse;
            border: 1px solid #dee2e6;
        }

            table.dataTable th, table.dataTable td {
                border: 1px solid #dee2e6;
                padding: 8px;
                text-align: center !important;
            }

        th:nth-child(1), td:nth-child(1) {
            width: 10%; /* STT */
        }

        th:nth-child(2), td:nth-child(2) {
            width: 40%; /* Tên người dùng */
        }

        th:nth-child(3), td:nth-child(3) {
            width: 20%; /* Điểm */
        }

        th:nth-child(4), td:nth-child(4) {
            width: 30%; /* Thao tác */
        }
    </style>
</head>
<body>
    <h2>Danh Sách Người Dùng</h2>
    <div class="d-flex justify-content-between align-items-center flex-wrap gap-2 mb-3">

        <!-- Add User Button -->
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#userModal" onclick="openAddUserModal()">➕ Thêm Người Dùng</button>

        <!-- Upload Excel + Delete Section -->
        <div class="d-flex align-items-center gap-2 flex-wrap">
            <!-- Delete User -->
            <input type="text" id="deleteTransactionInput" class="form-control form-control-sm" placeholder="Nhập ngày xoá: 1/7/2025" style="width: 200px;">
            <button class="btn btn-danger" onclick="deleteTransactionByDate()">🗑️ Xóa giao dịch</button>

            <!-- Upload Excel -->
            <input type="file" id="excelFile" class="form-control form-control-sm" accept=".xlsx,.xls" style="width: auto;">
            <button id="uploadBtn" class="btn btn-primary">📁 Upload Excel</button>
        </div>

    </div>


    <div id="toastContainer" class="toast-container position-fixed bottom-0 end-0 p-3"></div>

    <div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="errorModalLabel">Lỗi</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Đóng"></button>
                </div>
                <div class="modal-body" id="errorModalBody">
                </div>
            </div>
        </div>
    </div>

    <table id="userTable" class="display">
        <thead>
            <tr>
                <th>STT</th>
                <th>Tên Người Dùng</th>
                <th>Điểm</th>
                <th>Thao tác</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>

    <div class="modal fade" id="userModal" tabindex="-1" aria-labelledby="userModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="userModalLabel">Thêm/Chỉnh Sửa Người Dùng</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="userForm">
                        <div class="mb-3">
                            <label for="userName" class="form-label">Tên Người Dùng</label>
                            <input type="text" class="form-control" id="userName" required>
                        </div>
                        <div class="mb-3">
                            <label for="userScore" class="form-label">Điểm</label>
                            <input type="number" class="form-control" id="userScore" required>
                        </div>
                        <input type="hidden" id="userId">
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                    <button type="button" class="btn btn-primary" onclick="saveUser()">Lưu</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let userTable; // Declare userTable globally
        let activeAjaxRequests = 0; // To track active AJAX requests

        $(document).ready(function () {
            // --- Global AJAX Setup for Bearer Token ---
            const authToken = localStorage.getItem('authToken'); // Get token from localStorage

            if (authToken) {
                $.ajaxSetup({
                    headers: {
                        'Authorization': 'Bearer ' + authToken
                    }
                });
                console.log("Authorization header set for AJAX requests.");
            } else {
                console.warn("No 'authToken' found in localStorage. API requests might fail if authentication is required.");
                // Optionally, redirect to login or show a warning:
                // Swal.fire({
                //     icon: 'warning',
                //     title: 'Chưa Đăng Nhập',
                //     text: 'Bạn cần đăng nhập để truy cập tính năng này.',
                //     confirmButtonText: 'Đăng nhập ngay'
                // }).then(() => {
                //     window.location.href = '/login.html'; // Redirect to your login page
                // });
            }
            // --- End Global AJAX Setup ---

            // Initialize DataTable
            userTable = $('#userTable').DataTable({
                columns: [
                    {
                        data: null,
                        render: function (data, type, row, meta) {
                            return meta.row + 1; // Auto-increment STT
                        }
                    },
                    { data: 'name' },
                    { data: 'point' }, // Assuming your API returns 'point' as the score property
                    {
                        data: null,
                        render: function (data, type, row, meta) {
                            return `
                                <button class="btn btn-sm btn-warning" onclick="openEditUserModal(${row.id})">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-danger" onclick="deleteUser(${row.id})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            `;
                        }
                    }
                ],
                language: {
                    "decimal": "",
                    "emptyTable": "Không có dữ liệu",
                    "info": "Hiển thị _START_ đến _END_ của _TOTAL_ bản ghi",
                    "infoEmpty": "Hiển thị 0 đến 0 của 0 bản ghi",
                    "infoFiltered": "(lọc từ _MAX_ bản ghi)",
                    "infoPostFix": "",
                    "thousands": ",",
                    "lengthMenu": "Hiển thị _MENU_ bản ghi",
                    "loadingRecords": "Đang tải...",
                    "processing": "Đang xử lý...",
                    "search": "Tìm kiếm:",
                    "zeroRecords": "Không tìm thấy bản ghi nào",
                    "paginate": {
                        "first": "<<",
                        "last": ">>",
                        "next": ">",
                        "previous": "<"
                    }
                },
                serverSide: false,
                processing: true
            });

        window.deleteTransactionByDate = () => {
            const transactionDate = $('#deleteTransactionInput').val().trim();

            if (!transactionDate) {
                showToast("Lỗi", "Vui lòng nhập ngày xoá giao dịch.", "danger");
                return;
            }

            Swal.fire({
                title: `Xác nhận xóa`,
                text: `Bạn có chắc chắn muốn xóa giao dịch ngày "${transactionDate}"?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#6c757d',
                confirmButtonText: '🗑️ Xóa',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/api/Manager/delete-transactions?dateText=${encodeURIComponent(transactionDate)}`,
                        method: 'DELETE',
                        success: function (res) {
                            showToast("Thành công", res.message, "success");
                            loadUsers(); // Refresh list if needed
                        },
                        error: function (xhr) {
                            showToast("Lỗi", xhr.responseText || "Không thể xóa giao dịch.", "danger");
                        }
                    });
                }
            });
        }


                // Track active AJAX requests
        let activeAjaxRequests = 0;

        // --- Global AJAX Loading Indicator ---
        $(document)
            .ajaxStart(function () {
                activeAjaxRequests++;
                if (activeAjaxRequests === 1 && !Swal.getPopup()?.classList.contains('swal2-toast')) {
                    // Only show if no toast is being shown
                    Swal.fire({
                        title: 'Đang tải...',
                        text: 'Vui lòng chờ.',
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });
                }
            })
            .ajaxStop(function () {
                setTimeout(() => {
                    activeAjaxRequests--;
                    closeIfLoadingSwal(); // ✅ only closes loading modal, not toast
                }, 100);
            })
            .ajaxError(function (event, xhr, settings, thrownError) {
                setTimeout(() => {
                    activeAjaxRequests--;
                    closeIfLoadingSwal();

                    if (xhr.status === 401) {
                        console.error("401 Unauthorized");
                        showToast("Lỗi xác thực", "Phiên làm việc hết hạn hoặc không hợp lệ. Vui lòng đăng nhập lại.", "danger");
                        localStorage.removeItem('authToken');
                        setTimeout(() => {
                            window.location.href = '/'; // Adjust if needed
                        }, 2000);
                    } else if (xhr.status === 403) {
                        console.error("403 Forbidden");
                        showToast("Từ chối truy cập", "Bạn không có quyền thực hiện hành động này.", "danger");
                    } else {
                        console.error(`AJAX Error: ${xhr.status} - ${thrownError || 'Unknown Error'} for URL: ${settings.url}`);
                        // Optional generic error
                        // showToast("Lỗi", "Đã xảy ra lỗi. Vui lòng thử lại.", "danger");
                    }
                }, 100);
            });

        /**
         * ✅ Only closes if Swal popup is the loading modal (not toast)
         */
        function closeIfLoadingSwal() {
            const popup = Swal.getPopup();
            if (
                activeAjaxRequests === 0 &&
                Swal.isVisible() &&
                popup &&
                !popup.classList.contains('swal2-toast') // Make sure it's NOT a toast
            ) {
                Swal.close();
            }
        }

        // --- Toast Notification ---
        function showToast(title, message, type) {
            Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer);
                    toast.addEventListener('mouseleave', Swal.resumeTimer);
                }
            }).fire({
                icon: type === 'danger' ? 'error' : type, // Map 'danger' to 'error'
                title: title,
                text: message
            });
        }

        // --- End Global AJAX Loading Indicator ---


            // Load users initially
            loadUsers();

            $('#uploadBtn').click(function () {
                const fileInput = $('#excelFile')[0];
                const file = fileInput.files[0];

                if (!file) {
                    showToast("Cảnh báo", "Vui lòng chọn tệp Excel!", "warning");
                    return;
                }

                const formData = new FormData();
                formData.append("file", file);

                $.ajax({
                    url: "/api/Manager/import-transactions",
                    type: "POST",
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        showToast("Thành công", response, "success");
                        loadUsers();
                    },
                    error: function (xhr) {
                        // Global ajaxError will handle the SweetAlert close for this
                        const errorMsg = xhr.responseText || "Lỗi không xác định";
                        if (errorMsg.includes("do not exist") || errorMsg.includes("không tồn tại")) {
                            const users = extractUserListFromError(errorMsg);
                            showErrorModal("Các người dùng không tồn tại:", users);
                        } else {
                            showToast("Lỗi", errorMsg, "danger");
                        }
                    }
                });
            });

            function extractUserListFromError(msg) {
                const parts = msg.split(":");
                if (parts.length > 1) {
                    return parts[1].split(",").map(name => name.trim());
                }
                return [msg];
            }
        }); // End of $(document).ready

        window.showToast = (title, message, type) => {
            const toast = $(`
                <div class="toast align-items-center text-bg-${type} border-0 mb-2" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="3000">
                    <div class="d-flex">
                        <div class="toast-body">
                            <strong>${title}</strong><br>${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `);

            $('#toastContainer').append(toast);
            toast.toast('show');

            toast.on('hidden.bs.toast', function () {
                toast.remove();
            });
        };

        function showErrorModal(title, userList) {
            $('#errorModalLabel').text(title);
            const content = userList.map(u => `<li>${u}</li>`).join('');
            $('#errorModalBody').html(`<ul>${content}</ul>`);
            $('#errorModal').modal('show');
        }

        window.loadUsers = function () {
            $.ajax({
                url: '/api/User',
                method: 'GET',
                success: function (data) {
                    userTable.clear().rows.add(data).draw();
                },
                error: function (xhr, status, error) {
                    // This error is caught by global ajaxError handler
                    console.error('Lỗi khi tải danh sách người dùng:', error);
                    // showToast("Lỗi", "Không thể tải danh sách người dùng!", "danger"); // No need to show toast twice
                }
            });
        };

        window.openAddUserModal = function () {
            $('#userModalLabel').text('Thêm Người Dùng');
            $('#userForm')[0].reset();
            $('#userId').val('');
        };

        window.openEditUserModal = function (id) {
            $.ajax({
                url: `/api/User/${id}`,
                method: 'GET',
                success: function (user) {
                    $('#userModalLabel').text('Chỉnh Sửa Người Dùng');
                    $('#userName').val(user.name);
                    $('#userScore').val(user.point); // Assuming 'point' is the score property from your API
                    $('#userId').val(user.id);
                    $('#userModal').modal('show');
                },
                error: function (xhr, status, error) {
                    // This error is caught by global ajaxError handler
                    console.error('Lỗi khi lấy thông tin người dùng:', error);
                    // showToast("Lỗi", "Không thể lấy thông tin người dùng!", "danger"); // No need to show toast twice
                }
            });
        };

        window.saveUser = function () {
            const name = $('#userName').val();
            const score = parseFloat($('#userScore').val()) || 0;
            const id = $('#userId').val();

            if (!name || isNaN(score)) {
                showToast("Cảnh báo", "Vui lòng điền đầy đủ và chính xác thông tin!", "warning");
                return;
            }

            const userData = { name, point: score }; // Ensure 'point' matches your C# model's property
            let method, url;

            if (id) {
                method = 'PUT';
                url = `/api/User/${id}`;
                userData.id = parseInt(id);
            } else {
                method = 'POST';
                url = '/api/User';
            }

            $.ajax({
                url: url,
                method: method,
                contentType: 'application/json',
                data: JSON.stringify(userData),
                success: function () {
                    showToast("Thành công", id ? "Chỉnh sửa người dùng thành công!" : "Thêm người dùng thành công!", "success");
                    loadUsers();
                    $('#userModal').modal('hide');
                    $('.modal-backdrop').remove();
                    $('body').removeClass('modal-open');
                },
                error: function (xhr, status, error) {
                    // This error is caught by global ajaxError handler
                    console.error('Lỗi khi lưu người dùng:', error);
                    // showToast("Lỗi", "Không thể lưu người dùng!", "danger"); // No need to show toast twice
                }
            });
        };

        window.deleteUser = function (id) {
            Swal.fire({
                title: 'Bạn có chắc chắn?',
                text: 'Hành động này sẽ xóa người dùng vĩnh viễn!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Xóa',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/api/User/${id}`,
                        method: 'DELETE',
                        success: function () {
                            showToast("Thành công", "🗑️ Xóa người dùng thành công!", "success");
                            loadUsers();
                        },
                        error: function (xhr, status, error) {
                            // This error is caught by global ajaxError handler
                            console.error('Lỗi khi xóa người dùng:', error);
                            // showToast("Lỗi", "❌ Không thể xóa người dùng!", "danger"); // No need to show toast twice
                        }
                    });
                }
            });
        };
    </script>
</body>
</html>